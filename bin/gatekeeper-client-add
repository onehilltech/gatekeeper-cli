#!/usr/bin/env node
'use strict';

var program    = require ('commander')
  , gatekeeper = require ('@onehilltech/gatekeeper')
  , async      = require ('async')
  , winston    = require ('winston')
  , prompt     = require ('prompt')
  , _          = require ('underscore')
  , util       = require ('util')
  , gatekeeperClient = require ('../lib/GatekeeperClient')
  ;

const base = {
  name: {required: true},
  email: {required: true},
  enabled: {default: true, type: 'boolean'}
};

var schemas = { };

schemas.native = _.extend (_.clone (base), {
  client_secret: {hidden: true}
});

schemas.recaptcha = _.extend (_.clone (base), {
  recaptcha_secret: {required: true, hidden: true}
});

schemas.android = _.extend (_.clone (schemas.native), {
  package: {required: true}
});


program
  .option ('-b, --base <base>', 'Base uri for the Gatekeeper service')
  .parse (process.argv);

function actionComplete (err, result) {
  if (err)
    return winston.log ('error', util.inspect (err));
  else
    console.log (result.client);
}

async.waterfall ([
  function (callback) {
    prompt.start ();

    async.waterfall ([
      function (callback) {
        prompt.message = 'client';
        prompt.delimiter = ':';

        prompt.get ({
          properties: {
            type: {required: true, description: '[' + Object.keys (schemas).join (',') + ']'}
          }
        }, callback);
      },

      function (options, callback) {
        // Get the prompt schema for the client type. If the client does not exist,
        // then we need to stop.
        const typeSchema = schemas[options.type];

        if (!typeSchema)
          return callback (new Error ('invalid client type'));

        async.waterfall ([
          function (callback) {
            prompt.get ({properties: typeSchema}, callback);
          },

          function (client, callback) {
            return callback (null, _.extend (client, options));
          }
        ], callback);
      }
    ], callback);
  },

  function (options, callback) {
    async.waterfall ([
      function (callback) {
        gatekeeperClient (program.base, callback);
      },

      function (client, callback) {
        client.createClient (options, callback);
      }
    ], callback);
  }
], actionComplete);
